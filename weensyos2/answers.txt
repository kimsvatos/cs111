Name: Kimberly Svatos
UCLA ID: 604 425 426

Collaborators:

-------------------------------------------------------------------------------

Response to Exercise 1:

The name of the scheduling algorithm is: round-robin


(Exercise 2 is a coding exercise)
For Exercise 2, in schedos-kern.c I added:

	else if(scheduling_algorithm == 2){ //strict priority, exercise 2
			int j;
 			while(1){
 				for(j = 1; j < NPROCS; ++j){
 					if(proc_array[j].p_state == P_RUNNABLE){
 						run(&proc_array[j]);
 					}
 				}
 			}
 		}

and in schedos-1.c, I changed sys_yield(); to sys_exit(0);


Response to Exercise 3:

Average turnaround time for scheduling_algorithm 0: 
	(1277 + 1278 + 1279 + 1280)/4 = 1278.5 ms
Average turnaround time for scheduling_algorithm 1: 
	((320*1)+(320*2)+(320*3)+(320*4))/4 = 800 ms

Average wait time for scheduling_algorithm 0:
	(0+1+2+3+4)/4 = 1.5 ms
Average wait time for scheduling_algorithm 1:
	(0 + 320 + 640 + 960)/4 = 480 ms



Exercise 4:

Did you complete Exercise 4A, Exercise 4B, or both for extra credit?
Both. 
Note: 
	INT_SYS_USER1 is used for sys_share
	INT_SYS_USER2 is used for sys_priority

Exercise 5:
The first portion of output in the image reads: (with spacing added)
1234 1234 1234 1234 123 1234
this indicates that process four was interrupted, as it did not print in the 
5th round robin cycle. 

(Exercise 6 is a coding exercise)
I added a sys_print system call, for which:
INT_SYS_PRINT was defined as a constant in schedos.h
sys_print() was added as a system call in schedos-app.h

added in schedos-kern.c:
	case INT_SYS_PRINT: //new system call for ex. 6
        *cursorpos++ = reg->reg_eax;
        run(current);
and in schedos-1.c:
	replaced
			*cursorpos++ = PRINTCHAR;
	with
			sys_print(PRINTCHAR);

Anything else you'd like us to know:



Extra credit exercises:

8. Implemented spin lock as another method of synchronization. 
to schedos-symbols.ld, added:
	PROVIDE(spin_lock = 0x198004);
In schedos-1.c, added:

		#ifndef __EXERCISE_8__
		sys_print(PRINTCHAR);
		#endif

		#ifdef __EXERCISE_8__
		while(atomic_swap(&spin_lock, 1) != 0){
 //run forever until locked
			continue;
		}
		*cursorpos++ = PRINTCHAR;
		atomic_swap(&spin_lock, 0); //free
		#endif


